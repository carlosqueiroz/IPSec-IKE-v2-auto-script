# Hostname - hostname of IPSec server 
# If this variable is not assigned manually, then it'll be automatically calculateg using "/ip cloud"
# Example:
# :local Hostname "my.domain.com"
:local Hostname

:local PeerName "UserName"
:local Password "KeepInSecret"

:log warning " ============== Starting script ============== "
:log warning " ============== Check DNS name and IP address ============== "
:if ([:len $Hostname]=0) do={
     :if ([/ip cloud get value-name=ddns-enabled] = false) do {
         /ip cloud set ddns-enabled=yes
         :delay 10s
     } 
:set $Hostname [/ip cloud get value-name=dns-name]
:if ([:len $Hostname]=0) do={
     :log error "Script error: cannot get DNS name"
     :error "Script error: cannot get DNS name"
	 }
}

:log info " ============== Check if script can use given parameters ============== "

:if ([/certificate find name="$PeerName@$Hostname"] != "") do={
          :log error "Script error: certificate $PeerName@$Hostname already exists"
          :error "Script error: certificate $PeerName@$Hostname already exists"
     } else {
          :log info "Script: certificate name $PeerName@$Hostname OK"
     }
	 
:if ([/file find name="cert_export_$PeerName@$Hostname.crt"] != "") do={
          :log error "Script error: file cert_export_ca.$Hostname.crt already exists"
          :error "Script error: file cert_export_ca.$Hostname.crt already exists"
     } else {
     :log info "Script: file name cert_export_ca.$Hostname.crt OK"
     }
	 
:log info " ============== Creating client certificate from template ============== "
:do {/certificate 
     add copy-from="~client-template@$Hostname" name="$PeerName@$Hostname" common-name="$PeerName@$Hostname" subject-alt-name="email:$PeerName@$Hostname"
     :log info " ============== Signing client certificate with ca.$Hostname ============== "
} on-error={
     :log error "Script error: cannot copy-from ~client-template@$Hostname certificate"
     :error "Script error: cannot copy-from ~client-template@$Hostname certificate"
}    
:do {/certificate sign "$PeerName@$Hostname" ca="ca.$Hostname";
     :log info " ============== Exporting client certificate + private key into file .p12 ============== "
} on-error={
     :log error "Script error: cannot sign client certificate $PeerName@$Hostname"
     :error "Script error: cannot sign client certificate $PeerName@$Hostname"
}     
:do {/certificate export-certificate "$PeerName@$Hostname" type=pkcs12 export-passphrase=$Password
}  on-error={
     :log error "Script error: cannot create export-certificate $PeerName@$Hostname"
     :error "Script error: cannot create export-certificate $PeerName@$Hostname"
}
:do {/ip ipsec identity
     add auth-method=digital-signature certificate="$Hostname" remote-certificate="$PeerName@$Hostname" generate-policy=port-strict \
     match-by=certificate mode-config="modeconf-$Hostname" peer="peer-$IPaddress" policy-template-group="group-$Hostname" remote-id="user-fqdn:$PeerName@$Hostname"
} on-error={
	 :log error "Script error: cannot create ipsec identity"
     :error "Script error: cannot create ipsec identity"
}

:log warn " ============== Script finished ============== "
