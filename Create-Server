# Hostname - hostname of IPSec server 
# If this variable is not assigned manually, then it'll be automatically calculateg using "/ip cloud"
# Example:
# :local Hostname "my.domain.com"
:local my.domain.com 

# IPaddress - IP address of given Hostname variable.
# If this variable is not assigned manually, then it'll be automatically resolved using ":resolve $Hostname".
# Example:
# :local IPaddress 11.22.33.44
:local IPaddress 

:local Country "DE"
:local State "Frankfurt"

:log warning " ============== Starting script ============== "
:log warning " ============== Check DNS name and IP address ============== "
:if ([:len $Hostname]=0) do={
     :if ([/ip cloud get value-name=ddns-enabled] = false) do {
         /ip cloud set ddns-enabled=yes
         :delay 10s
     } 
:set $Hostname [/ip cloud get value-name=dns-name]
:if ([:len $Hostname]=0) do={
     :log error "Script error: cannot get DNS name"
     :error "Script error: cannot get DNS name"
	 }
}

:if ([:len $IPaddress]=0) do={
    do {:set $IPaddress [:resolve $Hostname]} on-error={
	     :log error "Script error: cannot resolve DNS name"
	     :error "Script error: cannot resolve DNS name"
	}
} 

:log warning " ============== Check if script can use given parameters ============== "

:if ([/certificate find name="ca.$Hostname"] != "") do={
          :log error "Script error: certificate ca.$Hostname already exists"
          :error "Script error: certificate ca.$Hostname already exists"
     } else {
          :log info "Script: certificate name ca.$Hostname OK"
     }

:if ([/certificate find name="$Hostname"] != "") do={
          :log error "Script error: certificate $Hostname already exists"
          :error "Script error: certificate $Hostname already exists"
     } else {
     :log info "Script: certificate name $Hostname OK"
     }

:if ([/certificate find name="~client-template@$Hostname"] != "") do={
          :log error "Script error: certificate template ~client-template@$Hostname already exists"
          :error "Script error: certificate template ~client-template@$Hostname already exists"
     } else {
     :log info "Script: certificate template name ~client-template@$Hostname OK"
     }

:if ([/file find name="cert_export_ca.$Hostname.crt"] != "") do={
          :log error "Script error: file cert_export_ca.$Hostname.crt already exists"
          :error "Script error: file cert_export_ca.$Hostname.crt already exists"
     } else {
     :log info "Script: file name cert_export_ca.$Hostname.crt OK"
     }

:if ([/int bridge find name="bridge-loopback"] != "") do={
          :log error "Script error: bridge bridge-loopback already exists"
          :error "Script error: bridge bridge-loopback already exists"
     } else {
     :log info "Script: bridge name bridge-loopback OK"
     }

:if ([/ip address find address="10.0.88.2/24"] != "") do={
          :log error "Script error: ip address 10.0.88.1/24 already exists"
          :error "Script error: ip address 10.0.88.1/24 already exists"
     } else {
     :log info "Script: ip address 10.0.88.1/24 OK"
     }

:if ([/ip pool find name="pool-$Hostname"] != "") do={
          :log error "Script error: ip pool pool-$Hostname already exists"
          :error "Script error: ip pool pool-$Hostname already exists"
     } else {
     :log info "Script: ip pool name pool-$Hostname OK"
     }

:if ([/ip ipsec mode-config find name="modeconf-$Hostname"] != "") do={
          :log error "Script error: mode-config modeconf-$Hostname already exists"
          :error "Script error: mode-config modeconf-$Hostname already exists"
     } else {
     :log info "Script: mode-config name modeconf-$Hostname OK"
     }

:if ([/ip ipsec profile find name="profile-$Hostname"] != "") do={
     :log error "Script error: ipsec profile profile-$Hostname already exists"
     :error "Script error: ipsec profile profile-$Hostname already exists"
     } else {
     :log info "Script: ipsec profile name profile-$Hostname OK"
     }

:if ([/ip ipsec peer find name="peer-$IPaddress"] !="") do={
     :log error "Script error: ipsec peer peer-$IPaddress already exists"
     :error "Script error: ipsec peer peer-$IPaddress already exists"
     } else {
     :log info "Script: ipsec peer name peer-$IPaddress OK"
     }

:if ([/ip ipsec proposal find name="proposal-$Hostname"] != "") do={
     :log error "Script error: ipsec proposal proposal-$Hostname already exists"
     :error "Script error: ipsec proposal proposal-$Hostname already exists"
     } else {
     :log info "Script: ipsec proposal name proposal-$Hostname OK"
     }

:if ([/ip ipsec policy group find name="group-$Hostname"] != "") do={
     :log error "Script error: ipsec policy group group-$Hostname already exists"
     :error "Script error: ipsec policy group group-$Hostname already exists"
     } else {
     :log info "Script: ipsec policy group name group-$Hostname OK"
     }

:if ([/ip ipsec policy find dst-address="10.0.88.0/24" ] != "") do={
     :log error "Script error: ipsec policy for dst-address=10.0.88.0/24 already exists"
     :error "Script error: ipsec policy for dst-address=10.0.88.0/24 already exists"
     } else {
     :log info "Script: ipsec policy for dst-address=10.0.88.0/24 OK"
     }

:log info " ============== Generating CA SSL certificate ============== "
:do {/certificate 
     add name="ca.$Hostname" country=$Country state=$State locality=City \
     organization="$Hostname" common-name="ca.$Hostname"  subject-alt-name="DNS:ca.$Hostname"  \
     key-size=4096 days-valid=3650 trusted=yes key-usage=digital-signature,key-encipherment,data-encipherment,key-cert-sign,crl-sign} on-error={
          :log error "Script error: Cannot add certificate ca.$Hostname"
          :error "Script error: Cannot add certificate ca.$Hostname"
}

:log info " ============== Signing CA SSL certificate (Certificate Authority) ============== "
:delay 1
:do {/certificate sign "ca.$Hostname"} on-error={
     :log error "Script error: Cannot sign ca.$Hostname"
     :error "Script error: Cannot sign ca.$Hostname"
}

:log info " ============== Generating server SSL certificate ============== "
:do {/certificate 
     add name="$Hostname" country=$Country state=$State locality="City" organization="$Hostname" common-name="$Hostname" \
     subject-alt-name="DNS:$Hostname" key-size=2048 days-valid=1095 trusted=yes key-usage=tls-server} on-error={
          :log error "Script error: Cannot add certificate $Hostname"
          :error "Script error: Cannot add certificate $Hostname"
}

:log info " ============== Signing server certificate with ca.$Hostname ============== "
:delay 1
:do {/certificate sign "$Hostname" ca="ca.$Hostname"} on-error={
     :log error "Cannot sign $Hostname with ca.$Hostname"
     :error "Cannot sign $Hostname with ca.$Hostname"
}

:log info " ============== Creating template for signing clients ============== "
:do {/certificate
     add name="~client-template@$Hostname" country=$Country state=$State locality="City" organization="$Hostname" common-name="~client-template@$Hostname" \
     subject-alt-name="email:~client-template@$Hostname" key-size=2048 days-valid=365 trusted=yes key-usage=tls-client} on-error={
          :log error "Cannot add client-template@$Hostname"
          :error "Cannot add client-template@$Hostname"
}

:log info " ============== Exporting CA certificate to file cert_export_ca.$Hostname ============== "
:do {/certificate export-certificate "ca.$Hostname" type=pem} on-error={
     :log error "Cannot export-certificate ca.$Hostname"
     :error "Cannot export-certificate ca.$Hostname"
}

:log info " ============== Create IKEv2 server ============== "
:do {/interface bridge add name="bridge-loopback"} on-error={
     :log error "bridge bridge-loopback already exists"
     :error "bridge bridge-loopback already exists"
}
:do {/ip address add address=10.0.88.1/24 interface="bridge-loopback" network=10.0.88.0} on-error={
     :log error "Cannot add ip address (10.0.88.1/24) on interface bridge-loopback"
     :error "Cannot add ip address (10.0.88.1/24) on interface bridge-loopback"
}
:do {/ip pool add name="pool-$Hostname" ranges=10.0.88.2-10.0.88.254} on-error={
     :log error "IP pool (10.0.88.2-10.0.88.254) already exists"
     :error "IP pool (10.0.88.2-10.0.88.254) already exists"
}

:log info " ============== Create new IPSec mode config ============== "
:do {/ip ipsec mode-config add address-pool="pool-$Hostname" address-prefix-length=32 name="modeconf-$Hostname" split-include=0.0.0.0/0 static-dns=10.0.88.1 system-dns=no} on-error={
     :log error "Cannot create modeconf-$Hostname or it already exists"
     :error "Cannot create modeconf-$Hostname or it already exists"
}

:log info " ============== Create new IPSec peer profile (phase 1) ============== "
:do {/ip ipsec profile add dh-group=modp2048,modp1536,modp1024 enc-algorithm=aes-256,aes-192,aes-128 hash-algorithm=sha256 name="profile-$Hostname" nat-traversal=yes proposal-check=obey } on-error={
     :log error "Cannot create profile-$Hostname or it already exists"
     :error "Cannot create profile-$Hostname or it already exists"
}

:log info " ============== Create new IPSec peer using public IP address (mode IKE2) ============== "
:do {/ip ipsec peer add exchange-mode=ike2 address=0.0.0.0/0 local-address="$IPaddress" name="peer-$IPaddress" passive=yes send-initial-contact=yes profile="profile-$Hostname"} on-error={
     :log error "Cannot create ipsec peer-$IPaddress or it already exists"
     :error "Cannot create ipsec peer-$IPaddress or it already exists"
}

:log info " ============== Create new IPSec proposal (phase 2) ============== "
:do {/ip ipsec proposal add auth-algorithms=sha512,sha256,sha1 enc-algorithms=aes-256-cbc,aes-256-ctr,aes-256-gcm,aes-192-ctr,aes-192-gcm,aes-128-cbc,aes-128-ctr,aes-128-gcm lifetime=8h name="proposal-$Hostname" pfs-group=none} on-error={
     :log error "Cannot create ipsec proposal-$Hostname or it already exists"
     :error "Cannot create ipsec proposal-$Hostname or it already exists"
}

:log info " ============== Create new IPSec policy group ============== "
:do {/ip ipsec policy group add name="group-$Hostname"} on-error={
     :log error "Cannot create policy group-$Hostname or it already exists"
     :error "Cannot create policy group-$Hostname or it already exists"
}

:log info " ============== Create new template IPSec policy ============== "
:do {/ip ipsec policy add dst-address=10.0.88.0/24 group="group-$Hostname" proposal="proposal-$Hostname" src-address=0.0.0.0/0 template=yes} on-error={
     :log error "Cannot create ipsec policy dst-address=10.0.88.0/24 src-address=0.0.0.0/0 or it already exists"
     :error "Cannot create ipsec policy dst-address=10.0.88.0/24 src-address=0.0.0.0/0 or it already exists"
}

:log warn " ============== Script finished ============== "
